task polymer {
    inputs.files fileTree('website')
    outputs.file('website/build/client/index.html')

    doLast {
        exec {
            workingDir './website'
            commandLine = ['npm', 'install']
        }
        exec {
            workingDir './website'
            commandLine = ['polymer', 'build']
        }
    }
    inputs.files(fileTree(dir: './website', include: '**/*', exclude: '/build/**'))
    outputs.dir('./website/build')
}

task distribution(type: Tar, dependsOn: [polymer]) {
    archiveBaseName = 'mutable-client'
    duplicatesStrategy = 'EXCLUDE'

    into('/') {
        from('script') {
            fileMode = 0755
            include '**/*'
            expand(jar: jar.outputs.files[0].name, app: project.name, version: project.version)
        }
    }

    into('conf') {
        from fileTree('conf')
    }

    into('website') {
        from fileTree('website/build/client')
    }

    into('website/resources') {
        from fileTree('website/resources/')
    }

    into('/website') {
        from 'website/manifest.json', 'website/service_worker.json'
    }

    project(':services').subprojects.each { subproject ->
        into('lib') {
            from(subproject.configurations.compile)
        }
    }

    into('lib') {
        from(project(':common').configurations.compile)
        from(project(':services').configurations.compile)
        from(project(':common').jar)
        from(project(':services').subprojects.jar)
    }
}

def server = project(':services').subprojects

task generate(type: JavaExec, dependsOn: server.classes) {
    workingDir = '.'
    main = 'com.codingchili.core.Launcher'

    args += '--generate'

    server.each {
        classpath += it.sourceSets.main.runtimeClasspath
    }
}

task run(type: JavaExec, dependsOn: server.classes) {
    workingDir = '.'
    main = 'com.codingchili.core.Launcher'

    if (project.hasProperty('exec')) {
        args += exec
    } else {
        args += '--deploy'
    }

    server.each {
        classpath += it.sourceSets.main.runtimeClasspath
    }
}